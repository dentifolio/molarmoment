{"ast":null,"code":"var _jsxFileName = \"/Users/tmoney/Desktop/mvp2/frontend/src/PublicMapView.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { GoogleMap, Marker, InfoWindow } from '@react-google-maps/api';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst containerStyle = {\n  width: '100%',\n  height: '500px'\n};\nconst center = {\n  lat: 40.7128,\n  lng: -74.0060\n};\nconst PublicMapView = () => {\n  _s();\n  const [offices, setOffices] = useState([]);\n  const [coordinates, setCoordinates] = useState({});\n  const [selectedOffice, setSelectedOffice] = useState(null);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    fetchActiveOffices();\n    const interval = setInterval(fetchActiveOffices, 1000);\n    return () => clearInterval(interval);\n  }, []);\n  const fetchActiveOffices = async () => {\n    try {\n      const response = await axios.get('http://localhost:5000/active-offices');\n      setOffices(response.data);\n      setError(null);\n      response.data.forEach(async office => {\n        if (office.zipCode && !coordinates[office.zipCode]) {\n          const coords = await getCoordinatesFromZip(office.zipCode);\n          if (coords) {\n            setCoordinates(prev => ({\n              ...prev,\n              [office.zipCode]: coords\n            }));\n          }\n        }\n      });\n    } catch (error) {\n      console.error('Error fetching active offices:', error);\n      setError('Failed to load office data.');\n    }\n  };\n  const getCoordinatesFromZip = async zipCode => {\n    try {\n      const response = await axios.get(`https://maps.googleapis.com/maps/api/geocode/json?address=${zipCode}&key=YOUR_GOOGLE_MAPS_API_KEY`);\n      if (response.data.results.length > 0) {\n        return response.data.results[0].geometry.location;\n      }\n    } catch (error) {\n      console.error('Error fetching coordinates for ZIP code:', error);\n    }\n    return null;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [error && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        color: 'red'\n      },\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(GoogleMap, {\n      mapContainerStyle: containerStyle,\n      center: center,\n      zoom: 12,\n      children: [Object.keys(coordinates).length > 0 && offices.map(office => {\n        const location = coordinates[office.zipCode];\n        if (!location) return null;\n        return /*#__PURE__*/_jsxDEV(Marker, {\n          position: location,\n          onClick: () => setSelectedOffice(office)\n        }, office.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 15\n        }, this);\n      }), selectedOffice && selectedOffice.zipCode && coordinates[selectedOffice.zipCode] && /*#__PURE__*/_jsxDEV(InfoWindow, {\n        position: coordinates[selectedOffice.zipCode],\n        onCloseClick: () => setSelectedOffice(null),\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: selectedOffice.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 82,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"ZIP Code: \", selectedOffice.zipCode]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 83,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Available Slots: \", selectedOffice.availableSlots ? selectedOffice.availableSlots.join(', ') : 'None']\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 84,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 5\n  }, this);\n};\n_s(PublicMapView, \"db0JYjGH46SNRNe1onkarkWbzUU=\");\n_c = PublicMapView;\nexport default PublicMapView;\nvar _c;\n$RefreshReg$(_c, \"PublicMapView\");","map":{"version":3,"names":["React","useEffect","useState","GoogleMap","Marker","InfoWindow","axios","jsxDEV","_jsxDEV","containerStyle","width","height","center","lat","lng","PublicMapView","_s","offices","setOffices","coordinates","setCoordinates","selectedOffice","setSelectedOffice","error","setError","fetchActiveOffices","interval","setInterval","clearInterval","response","get","data","forEach","office","zipCode","coords","getCoordinatesFromZip","prev","console","results","length","geometry","location","children","style","color","fileName","_jsxFileName","lineNumber","columnNumber","mapContainerStyle","zoom","Object","keys","map","position","onClick","id","onCloseClick","name","availableSlots","join","_c","$RefreshReg$"],"sources":["/Users/tmoney/Desktop/mvp2/frontend/src/PublicMapView.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { GoogleMap, Marker, InfoWindow } from '@react-google-maps/api';\nimport axios from 'axios';\n\nconst containerStyle = {\n  width: '100%',\n  height: '500px',\n};\n\nconst center = {\n  lat: 40.7128,\n  lng: -74.0060,\n};\n\nconst PublicMapView = () => {\n  const [offices, setOffices] = useState([]);\n  const [coordinates, setCoordinates] = useState({});\n  const [selectedOffice, setSelectedOffice] = useState(null);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    fetchActiveOffices();\n    const interval = setInterval(fetchActiveOffices, 1000);\n    return () => clearInterval(interval);\n  }, []);\n\n  const fetchActiveOffices = async () => {\n    try {\n      const response = await axios.get('http://localhost:5000/active-offices');\n      setOffices(response.data);\n      setError(null);\n      response.data.forEach(async (office) => {\n        if (office.zipCode && !coordinates[office.zipCode]) {\n          const coords = await getCoordinatesFromZip(office.zipCode);\n          if (coords) {\n            setCoordinates((prev) => ({ ...prev, [office.zipCode]: coords }));\n          }\n        }\n      });\n    } catch (error) {\n      console.error('Error fetching active offices:', error);\n      setError('Failed to load office data.');\n    }\n  };\n\n  const getCoordinatesFromZip = async (zipCode) => {\n    try {\n      const response = await axios.get(\n        `https://maps.googleapis.com/maps/api/geocode/json?address=${zipCode}&key=YOUR_GOOGLE_MAPS_API_KEY`\n      );\n      if (response.data.results.length > 0) {\n        return response.data.results[0].geometry.location;\n      }\n    } catch (error) {\n      console.error('Error fetching coordinates for ZIP code:', error);\n    }\n    return null;\n  };\n\n  return (\n    <div>\n      {error && <div style={{ color: 'red' }}>{error}</div>}\n      <GoogleMap mapContainerStyle={containerStyle} center={center} zoom={12}>\n        {Object.keys(coordinates).length > 0 &&\n          offices.map((office) => {\n            const location = coordinates[office.zipCode];\n            if (!location) return null;\n            return (\n              <Marker\n                key={office.id}\n                position={location}\n                onClick={() => setSelectedOffice(office)}\n              />\n            );\n          })}\n        {selectedOffice && selectedOffice.zipCode && coordinates[selectedOffice.zipCode] && (\n          <InfoWindow\n            position={coordinates[selectedOffice.zipCode]}\n            onCloseClick={() => setSelectedOffice(null)}\n          >\n            <div>\n              <h2>{selectedOffice.name}</h2>\n              <p>ZIP Code: {selectedOffice.zipCode}</p>\n              <p>Available Slots: {selectedOffice.availableSlots ? selectedOffice.availableSlots.join(', ') : 'None'}</p>\n            </div>\n          </InfoWindow>\n        )}\n      </GoogleMap>\n    </div>\n  );\n};\n\nexport default PublicMapView;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}