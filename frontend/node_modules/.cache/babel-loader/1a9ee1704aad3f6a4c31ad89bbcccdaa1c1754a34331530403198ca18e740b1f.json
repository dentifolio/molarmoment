{"ast":null,"code":"var _jsxFileName = \"/Users/tmoney/Desktop/mvp2/frontend/src/OfficeDashboard.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport { useNavigate } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst availableHours = [\"6:00 AM\", \"7:00 AM\", \"8:00 AM\", \"9:00 AM\", \"10:00 AM\", \"11:00 AM\", \"12:00 PM\", \"1:00 PM\", \"2:00 PM\", \"3:00 PM\", \"4:00 PM\", \"5:00 PM\", \"6:00 PM\"];\nconst OfficeDashboard = ({\n  officeData,\n  onLogout\n}) => {\n  _s();\n  const [selectedSlots, setSelectedSlots] = useState(officeData.availableSlots || []);\n  const [message, setMessage] = useState(\"\");\n  const navigate = useNavigate();\n  useEffect(() => {\n    fetchAvailability();\n  }, []);\n  const fetchAvailability = async () => {\n    try {\n      const response = await axios.get(`http://localhost:5000/get-availability?email=${officeData.email}`);\n      setSelectedSlots(response.data.availableSlots);\n    } catch (error) {\n      console.error(\"Error fetching availability:\", error);\n    }\n  };\n  const toggleSlot = slot => {\n    setSelectedSlots(prevSlots => prevSlots.includes(slot) ? prevSlots.filter(s => s !== slot) : [...prevSlots, slot]);\n  };\n  const handleUpdateAvailability = async () => {\n    try {\n      await axios.post(\"http://localhost:5000/update-availability\", {\n        email: officeData.email,\n        availableSlots: selectedSlots\n      });\n      setMessage(\"Availability updated successfully!\");\n\n      // Notify Public Map View to refresh\n      window.dispatchEvent(new Event(\"availabilityUpdated\"));\n    } catch (error) {\n      console.error(\"Error updating availability:\", error);\n      setMessage(\"Failed to update availability.\");\n    }\n  };\n  const handleLogout = () => {\n    onLogout();\n    navigate(\"/\");\n    window.dispatchEvent(new Event(\"availabilityUpdated\")); // Ensure map updates on logout\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Dental Office Dashboard\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: [\"Welcome, \", officeData.name]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Location: \", officeData.city, \", \", officeData.state, \", \", officeData.zipCode]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleLogout,\n      style: {\n        marginBottom: \"10px\",\n        padding: \"10px\",\n        backgroundColor: \"red\",\n        color: \"white\"\n      },\n      children: \"Logout\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Select Available Hours for Today\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: availableHours.map(hour => /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => toggleSlot(hour),\n        style: {\n          margin: \"5px\",\n          backgroundColor: selectedSlots.includes(hour) ? \"green\" : \"gray\",\n          color: \"white\",\n          padding: \"10px\",\n          border: \"none\",\n          cursor: \"pointer\"\n        },\n        children: hour\n      }, hour, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleUpdateAvailability,\n      style: {\n        marginTop: \"10px\",\n        padding: \"10px\",\n        backgroundColor: \"#007bff\",\n        color: \"white\"\n      },\n      children: \"Save Availability\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this), message && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 19\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 5\n  }, this);\n};\n_s(OfficeDashboard, \"oADNXsjVWtIBfy2bNJIMA12zh8w=\", false, function () {\n  return [useNavigate];\n});\n_c = OfficeDashboard;\nexport default OfficeDashboard;\nvar _c;\n$RefreshReg$(_c, \"OfficeDashboard\");","map":{"version":3,"names":["React","useState","useEffect","axios","useNavigate","jsxDEV","_jsxDEV","availableHours","OfficeDashboard","officeData","onLogout","_s","selectedSlots","setSelectedSlots","availableSlots","message","setMessage","navigate","fetchAvailability","response","get","email","data","error","console","toggleSlot","slot","prevSlots","includes","filter","s","handleUpdateAvailability","post","window","dispatchEvent","Event","handleLogout","children","fileName","_jsxFileName","lineNumber","columnNumber","name","city","state","zipCode","onClick","style","marginBottom","padding","backgroundColor","color","map","hour","margin","border","cursor","marginTop","_c","$RefreshReg$"],"sources":["/Users/tmoney/Desktop/mvp2/frontend/src/OfficeDashboard.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport { useNavigate } from \"react-router-dom\";\n\nconst availableHours = [\n  \"6:00 AM\", \"7:00 AM\", \"8:00 AM\", \"9:00 AM\", \"10:00 AM\", \"11:00 AM\",\n  \"12:00 PM\", \"1:00 PM\", \"2:00 PM\", \"3:00 PM\", \"4:00 PM\", \"5:00 PM\", \"6:00 PM\"\n];\n\nconst OfficeDashboard = ({ officeData, onLogout }) => {\n  const [selectedSlots, setSelectedSlots] = useState(officeData.availableSlots || []);\n  const [message, setMessage] = useState(\"\");\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    fetchAvailability();\n  }, []);\n\n  const fetchAvailability = async () => {\n    try {\n      const response = await axios.get(`http://localhost:5000/get-availability?email=${officeData.email}`);\n      setSelectedSlots(response.data.availableSlots);\n    } catch (error) {\n      console.error(\"Error fetching availability:\", error);\n    }\n  };\n\n  const toggleSlot = (slot) => {\n    setSelectedSlots((prevSlots) =>\n      prevSlots.includes(slot) ? prevSlots.filter((s) => s !== slot) : [...prevSlots, slot]\n    );\n  };\n\n  const handleUpdateAvailability = async () => {\n    try {\n      await axios.post(\"http://localhost:5000/update-availability\", {\n        email: officeData.email,\n        availableSlots: selectedSlots,\n      });\n\n      setMessage(\"Availability updated successfully!\");\n\n      // Notify Public Map View to refresh\n      window.dispatchEvent(new Event(\"availabilityUpdated\"));\n    } catch (error) {\n      console.error(\"Error updating availability:\", error);\n      setMessage(\"Failed to update availability.\");\n    }\n  };\n\n  const handleLogout = () => {\n    onLogout();\n    navigate(\"/\");\n    window.dispatchEvent(new Event(\"availabilityUpdated\")); // Ensure map updates on logout\n  };\n\n  return (\n    <div>\n      <h2>Dental Office Dashboard</h2>\n      <h3>Welcome, {officeData.name}</h3>\n      <p>Location: {officeData.city}, {officeData.state}, {officeData.zipCode}</p>\n\n      <button onClick={handleLogout} style={{ marginBottom: \"10px\", padding: \"10px\", backgroundColor: \"red\", color: \"white\" }}>\n        Logout\n      </button>\n\n      <h3>Select Available Hours for Today</h3>\n      <div>\n        {availableHours.map((hour) => (\n          <button\n            key={hour}\n            onClick={() => toggleSlot(hour)}\n            style={{\n              margin: \"5px\",\n              backgroundColor: selectedSlots.includes(hour) ? \"green\" : \"gray\",\n              color: \"white\",\n              padding: \"10px\",\n              border: \"none\",\n              cursor: \"pointer\",\n            }}\n          >\n            {hour}\n          </button>\n        ))}\n      </div>\n\n      <button onClick={handleUpdateAvailability} style={{ marginTop: \"10px\", padding: \"10px\", backgroundColor: \"#007bff\", color: \"white\" }}>\n        Save Availability\n      </button>\n\n      {message && <p>{message}</p>}\n    </div>\n  );\n};\n\nexport default OfficeDashboard;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}