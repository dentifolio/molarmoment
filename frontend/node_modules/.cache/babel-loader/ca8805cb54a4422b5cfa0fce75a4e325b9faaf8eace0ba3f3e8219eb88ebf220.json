{"ast":null,"code":"var _jsxFileName = \"/Users/tmoney/Desktop/mvp2/frontend/src/PublicMapView.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { GoogleMap, LoadScript, Marker, InfoWindow } from \"@react-google-maps/api\";\nimport axios from \"axios\";\nimport { useNavigate } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst mapContainerStyle = {\n  width: \"100%\",\n  height: \"500px\"\n};\nconst defaultCenter = {\n  lat: 40.7128,\n  lng: -74.0060\n};\nconst PublicMapView = ({\n  loggedInOffice,\n  navigateToDashboard\n}) => {\n  _s();\n  const [offices, setOffices] = useState([]);\n  const [selectedOffice, setSelectedOffice] = useState(null);\n  const navigate = useNavigate();\n  useEffect(() => {\n    fetchActiveOffices();\n    const interval = setInterval(fetchActiveOffices, 10000); // Refresh every 10 seconds\n    return () => clearInterval(interval);\n  }, []);\n  const fetchActiveOffices = async () => {\n    try {\n      const response = await axios.get(\"http://localhost:5000/active-offices\");\n      setOffices(response.data);\n    } catch (error) {\n      console.error(\"Error fetching active offices:\", error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      textAlign: \"center\",\n      padding: \"20px\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      style: {\n        color: \"#007bff\"\n      },\n      children: \"Live Dental Office Availability\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => {\n        if (loggedInOffice) {\n          navigate(\"/dashboard\");\n        } else {\n          navigate(\"/login\");\n        }\n      },\n      style: {\n        marginBottom: \"10px\",\n        padding: \"10px 20px\",\n        backgroundColor: loggedInOffice ? \"#28a745\" : \"#007bff\",\n        color: \"white\",\n        border: \"none\",\n        cursor: \"pointer\"\n      },\n      children: loggedInOffice ? \"Go to Dashboard\" : \"Office Login\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(LoadScript, {\n      googleMapsApiKey: process.env.REACT_APP_GOOGLE_MAPS_API_KEY,\n      children: /*#__PURE__*/_jsxDEV(GoogleMap, {\n        mapContainerStyle: mapContainerStyle,\n        center: defaultCenter,\n        zoom: 12,\n        children: [offices.map(office => office.location ? /*#__PURE__*/_jsxDEV(Marker, {\n          position: office.location,\n          onClick: () => setSelectedOffice(office)\n        }, office.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 15\n        }, this) : null), selectedOffice && /*#__PURE__*/_jsxDEV(InfoWindow, {\n          position: selectedOffice.location,\n          onCloseClick: () => setSelectedOffice(null),\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n              children: selectedOffice.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 79,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"Location: \", selectedOffice.city, \", \", selectedOffice.state, \", \", selectedOffice.zipCode]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 80,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n              children: \"Available Time Slots:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 81,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n              children: selectedOffice.availableSlots.length > 0 ? selectedOffice.availableSlots.map((slot, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n                children: slot\n              }, index, false, {\n                fileName: _jsxFileName,\n                lineNumber: 85,\n                columnNumber: 23\n              }, this)) : /*#__PURE__*/_jsxDEV(\"p\", {\n                children: \"No available slots\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 88,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 82,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 78,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 5\n  }, this);\n};\n_s(PublicMapView, \"uRi+wW2nuoEBwcvvnFi2MjGv9F8=\", false, function () {\n  return [useNavigate];\n});\n_c = PublicMapView;\nexport default PublicMapView;\nvar _c;\n$RefreshReg$(_c, \"PublicMapView\");","map":{"version":3,"names":["React","useEffect","useState","GoogleMap","LoadScript","Marker","InfoWindow","axios","useNavigate","jsxDEV","_jsxDEV","mapContainerStyle","width","height","defaultCenter","lat","lng","PublicMapView","loggedInOffice","navigateToDashboard","_s","offices","setOffices","selectedOffice","setSelectedOffice","navigate","fetchActiveOffices","interval","setInterval","clearInterval","response","get","data","error","console","style","textAlign","padding","children","color","fileName","_jsxFileName","lineNumber","columnNumber","onClick","marginBottom","backgroundColor","border","cursor","googleMapsApiKey","process","env","REACT_APP_GOOGLE_MAPS_API_KEY","center","zoom","map","office","location","position","id","onCloseClick","name","city","state","zipCode","availableSlots","length","slot","index","_c","$RefreshReg$"],"sources":["/Users/tmoney/Desktop/mvp2/frontend/src/PublicMapView.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { GoogleMap, LoadScript, Marker, InfoWindow } from \"@react-google-maps/api\";\nimport axios from \"axios\";\nimport { useNavigate } from \"react-router-dom\";\n\nconst mapContainerStyle = {\n  width: \"100%\",\n  height: \"500px\",\n};\n\nconst defaultCenter = {\n  lat: 40.7128,\n  lng: -74.0060,\n};\n\nconst PublicMapView = ({ loggedInOffice, navigateToDashboard }) => {\n  const [offices, setOffices] = useState([]);\n  const [selectedOffice, setSelectedOffice] = useState(null);\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    fetchActiveOffices();\n    const interval = setInterval(fetchActiveOffices, 10000); // Refresh every 10 seconds\n    return () => clearInterval(interval);\n  }, []);\n\n  const fetchActiveOffices = async () => {\n    try {\n      const response = await axios.get(\"http://localhost:5000/active-offices\");\n      setOffices(response.data);\n    } catch (error) {\n      console.error(\"Error fetching active offices:\", error);\n    }\n  };\n\n  return (\n    <div style={{ textAlign: \"center\", padding: \"20px\" }}>\n      <h1 style={{ color: \"#007bff\" }}>Live Dental Office Availability</h1>\n\n      {/* Toggle Button for Office Login */}\n      <button\n        onClick={() => {\n          if (loggedInOffice) {\n            navigate(\"/dashboard\");\n          } else {\n            navigate(\"/login\");\n          }\n        }}\n        style={{\n          marginBottom: \"10px\",\n          padding: \"10px 20px\",\n          backgroundColor: loggedInOffice ? \"#28a745\" : \"#007bff\",\n          color: \"white\",\n          border: \"none\",\n          cursor: \"pointer\",\n        }}\n      >\n        {loggedInOffice ? \"Go to Dashboard\" : \"Office Login\"}\n      </button>\n\n      <LoadScript googleMapsApiKey={process.env.REACT_APP_GOOGLE_MAPS_API_KEY}>\n        <GoogleMap mapContainerStyle={mapContainerStyle} center={defaultCenter} zoom={12}>\n          {offices.map((office) => (\n            office.location ? (\n              <Marker\n                key={office.id}\n                position={office.location}\n                onClick={() => setSelectedOffice(office)}\n              />\n            ) : null\n          ))}\n\n          {selectedOffice && (\n            <InfoWindow\n              position={selectedOffice.location}\n              onCloseClick={() => setSelectedOffice(null)}\n            >\n              <div>\n                <h2>{selectedOffice.name}</h2>\n                <p>Location: {selectedOffice.city}, {selectedOffice.state}, {selectedOffice.zipCode}</p>\n                <h3>Available Time Slots:</h3>\n                <ul>\n                  {selectedOffice.availableSlots.length > 0 ? (\n                    selectedOffice.availableSlots.map((slot, index) => (\n                      <li key={index}>{slot}</li>\n                    ))\n                  ) : (\n                    <p>No available slots</p>\n                  )}\n                </ul>\n              </div>\n            </InfoWindow>\n          )}\n        </GoogleMap>\n      </LoadScript>\n    </div>\n  );\n};\n\nexport default PublicMapView;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}