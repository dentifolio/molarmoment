{"ast":null,"code":"var _jsxFileName = \"/Users/tmoney/Desktop/mvp2/frontend/src/PublicMapView.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { GoogleMap, LoadScript, Marker, InfoWindow } from \"@react-google-maps/api\";\nimport axios from \"axios\";\nimport OfficeDashboard from \"./OfficeDashboard\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst containerStyle = {\n  width: \"100%\",\n  height: \"500px\"\n};\nconst defaultCenter = {\n  lat: 40.7128,\n  lng: -74.006\n};\nconst PublicMapView = ({\n  setLoggedInOffice\n}) => {\n  _s();\n  const [offices, setOffices] = useState([]);\n  const [selectedOffice, setSelectedOffice] = useState(null);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    fetchActiveOffices();\n    const interval = setInterval(fetchActiveOffices, 1000);\n    return () => clearInterval(interval);\n  }, []);\n  const fetchActiveOffices = async () => {\n    try {\n      console.log(\"Fetching updated active offices...\");\n      const response = await axios.get(\"http://localhost:5000/active-offices\");\n      setOffices(response.data);\n      setLoading(false);\n    } catch (error) {\n      console.error(\"Error fetching offices:\", error);\n      setLoading(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      style: {\n        textAlign: \"center\",\n        color: \"#007bff\"\n      },\n      children: \"Live Dental Office Availability\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this), loading ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 18\n    }, this) : null, /*#__PURE__*/_jsxDEV(LoadScript, {\n      googleMapsApiKey: \"AIzaSyDGBHVURcrUdjYNhCDNjFBWawsv612pQU0\",\n      children: /*#__PURE__*/_jsxDEV(GoogleMap, {\n        mapContainerStyle: containerStyle,\n        center: defaultCenter,\n        zoom: 12,\n        children: [offices.map(office => office.location ? /*#__PURE__*/_jsxDEV(Marker, {\n          position: office.location,\n          onClick: () => setSelectedOffice(office)\n        }, office.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 15\n        }, this) : console.warn(\"Skipping office with missing location:\", office)), selectedOffice && /*#__PURE__*/_jsxDEV(InfoWindow, {\n          position: selectedOffice.location,\n          onCloseClick: () => setSelectedOffice(null),\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n              children: selectedOffice.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 58,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"Location: \", selectedOffice.city, \", \", selectedOffice.state, \", \", selectedOffice.zipCode]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 59,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n              children: \"Available Time Slots:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 60,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n              children: selectedOffice.availableSlots.length > 0 ? selectedOffice.availableSlots.map((slot, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n                children: slot\n              }, index, false, {\n                fileName: _jsxFileName,\n                lineNumber: 63,\n                columnNumber: 72\n              }, this)) : /*#__PURE__*/_jsxDEV(\"li\", {\n                children: \"No available slots\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 65,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 61,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 57,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 5\n  }, this);\n};\n_s(PublicMapView, \"Ptx5ki78iIFjsAyHxXayxi4AAAA=\");\n_c = PublicMapView;\nexport default PublicMapView;\nvar _c;\n$RefreshReg$(_c, \"PublicMapView\");","map":{"version":3,"names":["React","useEffect","useState","GoogleMap","LoadScript","Marker","InfoWindow","axios","OfficeDashboard","jsxDEV","_jsxDEV","containerStyle","width","height","defaultCenter","lat","lng","PublicMapView","setLoggedInOffice","_s","offices","setOffices","selectedOffice","setSelectedOffice","loading","setLoading","fetchActiveOffices","interval","setInterval","clearInterval","console","log","response","get","data","error","children","style","textAlign","color","fileName","_jsxFileName","lineNumber","columnNumber","googleMapsApiKey","mapContainerStyle","center","zoom","map","office","location","position","onClick","id","warn","onCloseClick","name","city","state","zipCode","availableSlots","length","slot","index","_c","$RefreshReg$"],"sources":["/Users/tmoney/Desktop/mvp2/frontend/src/PublicMapView.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { GoogleMap, LoadScript, Marker, InfoWindow } from \"@react-google-maps/api\";\nimport axios from \"axios\";\nimport OfficeDashboard from \"./OfficeDashboard\";\n\nconst containerStyle = {\n  width: \"100%\",\n  height: \"500px\",\n};\n\nconst defaultCenter = { lat: 40.7128, lng: -74.006 };\n\nconst PublicMapView = ({ setLoggedInOffice }) => {\n  const [offices, setOffices] = useState([]);\n  const [selectedOffice, setSelectedOffice] = useState(null);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    fetchActiveOffices();\n    const interval = setInterval(fetchActiveOffices, 1000);\n    return () => clearInterval(interval);\n  }, []);\n\n  const fetchActiveOffices = async () => {\n    try {\n      console.log(\"Fetching updated active offices...\");\n      const response = await axios.get(\"http://localhost:5000/active-offices\");\n      setOffices(response.data);\n      setLoading(false);\n    } catch (error) {\n      console.error(\"Error fetching offices:\", error);\n      setLoading(false);\n    }\n  };\n\n  return (\n    <div>\n      <h1 style={{ textAlign: \"center\", color: \"#007bff\" }}>Live Dental Office Availability</h1>\n      {loading ? <p>Loading...</p> : null}\n\n      <LoadScript googleMapsApiKey=\"AIzaSyDGBHVURcrUdjYNhCDNjFBWawsv612pQU0\">\n        <GoogleMap mapContainerStyle={containerStyle} center={defaultCenter} zoom={12}>\n          {offices.map((office) =>\n            office.location ? (\n              <Marker\n                key={office.id}\n                position={office.location}\n                onClick={() => setSelectedOffice(office)}\n              />\n            ) : (\n              console.warn(\"Skipping office with missing location:\", office)\n            )\n          )}\n\n          {selectedOffice && (\n            <InfoWindow position={selectedOffice.location} onCloseClick={() => setSelectedOffice(null)}>\n              <div>\n                <h2>{selectedOffice.name}</h2>\n                <p>Location: {selectedOffice.city}, {selectedOffice.state}, {selectedOffice.zipCode}</p>\n                <h3>Available Time Slots:</h3>\n                <ul>\n                  {selectedOffice.availableSlots.length > 0 ? (\n                    selectedOffice.availableSlots.map((slot, index) => <li key={index}>{slot}</li>)\n                  ) : (\n                    <li>No available slots</li>\n                  )}\n                </ul>\n              </div>\n            </InfoWindow>\n          )}\n        </GoogleMap>\n      </LoadScript>\n    </div>\n  );\n};\n\nexport default PublicMapView;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}