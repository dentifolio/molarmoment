{"ast":null,"code":"var _jsxFileName = \"/Users/tmoney/Desktop/mvp2/frontend/src/PublicMapView.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { GoogleMap, LoadScript, Marker, InfoWindow } from '@react-google-maps/api';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst containerStyle = {\n  width: '100%',\n  height: '500px'\n};\nconst center = {\n  lat: 40.7128,\n  lng: -74.0060\n};\nconst PublicMapView = () => {\n  _s();\n  const [offices, setOffices] = useState([]);\n  const [selectedOffice, setSelectedOffice] = useState(null);\n\n  // Function to fetch active offices from the backend\n  const fetchActiveOffices = async () => {\n    try {\n      console.log(\"üîÑ Fetching updated active offices...\");\n      const response = await axios.get('http://localhost:5000/active-offices');\n      response.data.forEach(office => {\n        console.log(`üìç Office: ${office.name}, üïí Available Slots:`, office.availableSlots);\n      });\n      setOffices(response.data); // ‚úÖ Update the UI with the latest data\n    } catch (error) {\n      console.error('‚ùå Error fetching active offices:', error);\n    }\n  };\n\n  // Fetch office data every second to ensure real-time updates\n  useEffect(() => {\n    fetchActiveOffices();\n    const interval = setInterval(fetchActiveOffices, 1000); // Refresh every second\n    return () => clearInterval(interval);\n  }, []);\n  const handleMarkerClick = office => {\n    console.log(`üìå Rendering marker for: ${office.name}`);\n    console.log(`üïí Latest Available Slots:`, office.availableSlots);\n    setSelectedOffice(office);\n  };\n  const handleCloseInfoWindow = () => {\n    setSelectedOffice(null);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"map-container\",\n    style: {\n      textAlign: 'center',\n      padding: '20px'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      style: {\n        color: '#007bff'\n      },\n      children: \"Live Dental Office Availability\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(LoadScript, {\n      googleMapsApiKey: process.env.REACT_APP_GOOGLE_MAPS_API_KEY,\n      children: /*#__PURE__*/_jsxDEV(GoogleMap, {\n        mapContainerStyle: containerStyle,\n        center: center,\n        zoom: 12,\n        children: [offices.map(office => office.location ? /*#__PURE__*/_jsxDEV(Marker, {\n          position: office.location,\n          onClick: () => handleMarkerClick(office)\n        }, office.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 15\n        }, this) : console.warn(`‚ö†Ô∏è Skipping office with missing location:`, office)), selectedOffice && /*#__PURE__*/_jsxDEV(InfoWindow, {\n          position: selectedOffice.location,\n          onCloseClick: handleCloseInfoWindow,\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n              children: selectedOffice.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 67,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                children: \"Location:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 68,\n                columnNumber: 20\n              }, this), \" \", selectedOffice.city, \", \", selectedOffice.state, \", \", selectedOffice.zipCode]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 68,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n              children: \"Available Time Slots:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 69,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n              children: selectedOffice.availableSlots && selectedOffice.availableSlots.length > 0 ? selectedOffice.availableSlots.map((slot, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n                children: slot\n              }, index, false, {\n                fileName: _jsxFileName,\n                lineNumber: 72,\n                columnNumber: 72\n              }, this)) : /*#__PURE__*/_jsxDEV(\"li\", {\n                children: \"No available slots\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 74,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 70,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 66,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 5\n  }, this);\n};\n_s(PublicMapView, \"65A3b2+X2KaquF3wFDr6JCHAi/Y=\");\n_c = PublicMapView;\nexport default PublicMapView;\nvar _c;\n$RefreshReg$(_c, \"PublicMapView\");","map":{"version":3,"names":["React","useEffect","useState","GoogleMap","LoadScript","Marker","InfoWindow","axios","jsxDEV","_jsxDEV","containerStyle","width","height","center","lat","lng","PublicMapView","_s","offices","setOffices","selectedOffice","setSelectedOffice","fetchActiveOffices","console","log","response","get","data","forEach","office","name","availableSlots","error","interval","setInterval","clearInterval","handleMarkerClick","handleCloseInfoWindow","className","style","textAlign","padding","children","color","fileName","_jsxFileName","lineNumber","columnNumber","googleMapsApiKey","process","env","REACT_APP_GOOGLE_MAPS_API_KEY","mapContainerStyle","zoom","map","location","position","onClick","id","warn","onCloseClick","city","state","zipCode","length","slot","index","_c","$RefreshReg$"],"sources":["/Users/tmoney/Desktop/mvp2/frontend/src/PublicMapView.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { GoogleMap, LoadScript, Marker, InfoWindow } from '@react-google-maps/api';\nimport axios from 'axios';\n\nconst containerStyle = {\n  width: '100%',\n  height: '500px',\n};\n\nconst center = {\n  lat: 40.7128,\n  lng: -74.0060,\n};\n\nconst PublicMapView = () => {\n  const [offices, setOffices] = useState([]);\n  const [selectedOffice, setSelectedOffice] = useState(null);\n\n  // Function to fetch active offices from the backend\n  const fetchActiveOffices = async () => {\n    try {\n      console.log(\"üîÑ Fetching updated active offices...\");\n      const response = await axios.get('http://localhost:5000/active-offices');\n\n      response.data.forEach((office) => {\n        console.log(`üìç Office: ${office.name}, üïí Available Slots:`, office.availableSlots);\n      });\n\n      setOffices(response.data); // ‚úÖ Update the UI with the latest data\n    } catch (error) {\n      console.error('‚ùå Error fetching active offices:', error);\n    }\n  };\n\n  // Fetch office data every second to ensure real-time updates\n  useEffect(() => {\n    fetchActiveOffices();\n    const interval = setInterval(fetchActiveOffices, 1000); // Refresh every second\n    return () => clearInterval(interval);\n  }, []);\n\n  const handleMarkerClick = (office) => {\n    console.log(`üìå Rendering marker for: ${office.name}`);\n    console.log(`üïí Latest Available Slots:`, office.availableSlots);\n    setSelectedOffice(office);\n  };\n\n  const handleCloseInfoWindow = () => {\n    setSelectedOffice(null);\n  };\n\n  return (\n    <div className=\"map-container\" style={{ textAlign: 'center', padding: '20px' }}>\n      <h1 style={{ color: '#007bff' }}>Live Dental Office Availability</h1>\n      <LoadScript googleMapsApiKey={process.env.REACT_APP_GOOGLE_MAPS_API_KEY}>\n        <GoogleMap mapContainerStyle={containerStyle} center={center} zoom={12}>\n          {offices.map((office) =>\n            office.location ? (\n              <Marker key={office.id} position={office.location} onClick={() => handleMarkerClick(office)} />\n            ) : (\n              console.warn(`‚ö†Ô∏è Skipping office with missing location:`, office)\n            )\n          )}\n          {selectedOffice && (\n            <InfoWindow position={selectedOffice.location} onCloseClick={handleCloseInfoWindow}>\n              <div>\n                <h2>{selectedOffice.name}</h2>\n                <p><strong>Location:</strong> {selectedOffice.city}, {selectedOffice.state}, {selectedOffice.zipCode}</p>\n                <h4>Available Time Slots:</h4>\n                <ul>\n                  {selectedOffice.availableSlots && selectedOffice.availableSlots.length > 0 ? (\n                    selectedOffice.availableSlots.map((slot, index) => <li key={index}>{slot}</li>)\n                  ) : (\n                    <li>No available slots</li>\n                  )}\n                </ul>\n              </div>\n            </InfoWindow>\n          )}\n        </GoogleMap>\n      </LoadScript>\n    </div>\n  );\n};\n\nexport default PublicMapView;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}