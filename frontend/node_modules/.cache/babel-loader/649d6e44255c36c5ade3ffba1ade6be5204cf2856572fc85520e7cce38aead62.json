{"ast":null,"code":"var _jsxFileName = \"/Users/tmoney/Desktop/mvp2/frontend/src/PublicMapView.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { GoogleMap, Marker, InfoWindow } from '@react-google-maps/api';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst containerStyle = {\n  width: '100%',\n  height: '500px'\n};\nconst center = {\n  lat: 40.7128,\n  lng: -74.0060\n};\nconst PublicMapView = () => {\n  _s();\n  const [offices, setOffices] = useState([]);\n  const [coordinates, setCoordinates] = useState({});\n  const [selectedOffice, setSelectedOffice] = useState(null);\n  useEffect(() => {\n    fetchActiveOffices();\n  }, []);\n  const fetchActiveOffices = async () => {\n    try {\n      console.log(\"Fetching active offices...\");\n      const response = await axios.get('http://localhost:5000/active-offices');\n      console.log(\"Active offices fetched:\", response.data);\n      const updatedOffices = await Promise.all(response.data.map(async office => {\n        if (!office.location && office.zipCode) {\n          console.log(`Fetching coordinates for ZIP: ${office.zipCode}`);\n          const coords = await getCoordinatesFromZip(office.zipCode);\n          if (coords) {\n            return {\n              ...office,\n              location: coords\n            };\n          }\n        }\n        return office;\n      }));\n      setOffices(updatedOffices);\n    } catch (error) {\n      console.error('Error fetching active offices:', error);\n    }\n  };\n  const getCoordinatesFromZip = async zipCode => {\n    try {\n      const response = await axios.get(`https://maps.googleapis.com/maps/api/geocode/json?address=${zipCode}&key=YOUR_GOOGLE_MAPS_API_KEY`);\n      if (response.data.results.length > 0) {\n        return response.data.results[0].geometry.location;\n      }\n    } catch (error) {\n      console.error('Error fetching coordinates for ZIP code:', error);\n    }\n    return null;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Map Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(GoogleMap, {\n      mapContainerStyle: containerStyle,\n      center: center,\n      zoom: 12,\n      children: [offices.map(office => {\n        if (!office.location || !office.location.lat || !office.location.lng) {\n          console.warn(\"Skipping office with missing location:\", office);\n          return null;\n        }\n        console.log(\"Rendering marker for:\", office.name, \"at\", office.location);\n        return /*#__PURE__*/_jsxDEV(Marker, {\n          position: {\n            lat: office.location.lat,\n            lng: office.location.lng\n          },\n          onClick: () => setSelectedOffice(office)\n        }, office.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 13\n        }, this);\n      }), selectedOffice && /*#__PURE__*/_jsxDEV(InfoWindow, {\n        position: selectedOffice.location,\n        onCloseClick: () => setSelectedOffice(null),\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: selectedOffice.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 87,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"ZIP Code: \", selectedOffice.zipCode]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 5\n  }, this);\n};\n_s(PublicMapView, \"NpZKqDQBrxUKXLIM+BjJXvm4NjE=\");\n_c = PublicMapView;\nexport default PublicMapView;\nvar _c;\n$RefreshReg$(_c, \"PublicMapView\");","map":{"version":3,"names":["React","useEffect","useState","GoogleMap","Marker","InfoWindow","axios","jsxDEV","_jsxDEV","containerStyle","width","height","center","lat","lng","PublicMapView","_s","offices","setOffices","coordinates","setCoordinates","selectedOffice","setSelectedOffice","fetchActiveOffices","console","log","response","get","data","updatedOffices","Promise","all","map","office","location","zipCode","coords","getCoordinatesFromZip","error","results","length","geometry","children","fileName","_jsxFileName","lineNumber","columnNumber","mapContainerStyle","zoom","warn","name","position","onClick","id","onCloseClick","_c","$RefreshReg$"],"sources":["/Users/tmoney/Desktop/mvp2/frontend/src/PublicMapView.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { GoogleMap, Marker, InfoWindow } from '@react-google-maps/api';\nimport axios from 'axios';\n\nconst containerStyle = {\n  width: '100%',\n  height: '500px',\n};\n\nconst center = {\n  lat: 40.7128,\n  lng: -74.0060,\n};\n\nconst PublicMapView = () => {\n  const [offices, setOffices] = useState([]);\n  const [coordinates, setCoordinates] = useState({});\n  const [selectedOffice, setSelectedOffice] = useState(null);\n\n  useEffect(() => {\n    fetchActiveOffices();\n  }, []);\n\n  const fetchActiveOffices = async () => {\n    try {\n      console.log(\"Fetching active offices...\");\n      const response = await axios.get('http://localhost:5000/active-offices');\n      console.log(\"Active offices fetched:\", response.data);\n\n      const updatedOffices = await Promise.all(\n        response.data.map(async (office) => {\n          if (!office.location && office.zipCode) {\n            console.log(`Fetching coordinates for ZIP: ${office.zipCode}`);\n            const coords = await getCoordinatesFromZip(office.zipCode);\n            if (coords) {\n              return { ...office, location: coords };\n            }\n          }\n          return office;\n        })\n      );\n\n      setOffices(updatedOffices);\n    } catch (error) {\n      console.error('Error fetching active offices:', error);\n    }\n  };\n\n  const getCoordinatesFromZip = async (zipCode) => {\n    try {\n      const response = await axios.get(\n        `https://maps.googleapis.com/maps/api/geocode/json?address=${zipCode}&key=YOUR_GOOGLE_MAPS_API_KEY`\n      );\n      if (response.data.results.length > 0) {\n        return response.data.results[0].geometry.location;\n      }\n    } catch (error) {\n      console.error('Error fetching coordinates for ZIP code:', error);\n    }\n    return null;\n  };\n\n  return (\n    <div>\n      <h1>Map Loading...</h1>\n      <GoogleMap mapContainerStyle={containerStyle} center={center} zoom={12}>\n        {offices.map((office) => {\n          if (!office.location || !office.location.lat || !office.location.lng) {\n            console.warn(\"Skipping office with missing location:\", office);\n            return null;\n          }\n          console.log(\"Rendering marker for:\", office.name, \"at\", office.location);\n          return (\n            <Marker\n              key={office.id}\n              position={{ lat: office.location.lat, lng: office.location.lng }}\n              onClick={() => setSelectedOffice(office)}\n            />\n          );\n        })}\n        {selectedOffice && (\n          <InfoWindow\n            position={selectedOffice.location}\n            onCloseClick={() => setSelectedOffice(null)}\n          >\n            <div>\n              <h2>{selectedOffice.name}</h2>\n              <p>ZIP Code: {selectedOffice.zipCode}</p>\n            </div>\n          </InfoWindow>\n        )}\n      </GoogleMap>\n    </div>\n  );\n};\n\nexport default PublicMapView;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}