{"ast":null,"code":"var _jsxFileName = \"/Users/tmoney/Desktop/mvp2/frontend/src/PublicMapView.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { GoogleMap, LoadScript, Marker, InfoWindow } from \"@react-google-maps/api\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst containerStyle = {\n  width: \"100%\",\n  height: \"500px\"\n};\nconst center = {\n  lat: 40.7128,\n  lng: -74.0060\n};\nconst PublicMapView = () => {\n  _s();\n  const [offices, setOffices] = useState([]);\n  const [selectedOffice, setSelectedOffice] = useState(null);\n  useEffect(() => {\n    fetchActiveOffices();\n    const interval = setInterval(fetchActiveOffices, 10000); // Auto-refresh every 10 sec\n    return () => clearInterval(interval);\n  }, []);\n  useEffect(() => {\n    const handleAvailabilityUpdate = () => {\n      fetchActiveOffices();\n    };\n    window.addEventListener(\"availabilityUpdated\", handleAvailabilityUpdate);\n    return () => {\n      window.removeEventListener(\"availabilityUpdated\", handleAvailabilityUpdate);\n    };\n  }, []);\n  const fetchActiveOffices = async () => {\n    try {\n      const response = await axios.get(\"http://localhost:5000/active-offices\");\n      setOffices(response.data);\n    } catch (error) {\n      console.error(\"Error fetching active offices:\", error);\n    }\n  };\n  const handleMarkerClick = office => {\n    setSelectedOffice(office);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    style: {\n      textAlign: \"center\",\n      padding: \"20px\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      style: {\n        color: \"#007bff\"\n      },\n      children: \"Live Dental Office Availability\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(LoadScript, {\n      googleMapsApiKey: process.env.REACT_APP_GOOGLE_MAPS_API_KEY,\n      children: /*#__PURE__*/_jsxDEV(GoogleMap, {\n        mapContainerStyle: containerStyle,\n        center: center,\n        zoom: 12,\n        children: [offices.map(office => office.location && /*#__PURE__*/_jsxDEV(Marker, {\n          position: office.location,\n          onClick: () => handleMarkerClick(office)\n        }, office.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 15\n        }, this)), selectedOffice && /*#__PURE__*/_jsxDEV(InfoWindow, {\n          position: selectedOffice.location,\n          onCloseClick: () => setSelectedOffice(null),\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n              children: selectedOffice.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 66,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [selectedOffice.city, \", \", selectedOffice.state, \", \", selectedOffice.zipCode]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 67,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n              children: \"Available Time Slots:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 68,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n              children: selectedOffice.availableSlots.map((slot, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n                children: slot\n              }, index, false, {\n                fileName: _jsxFileName,\n                lineNumber: 71,\n                columnNumber: 21\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 69,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 65,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 5\n  }, this);\n};\n_s(PublicMapView, \"6RlDQODJx6aSTPrhgiMmGyvo+h4=\");\n_c = PublicMapView;\nexport default PublicMapView;\nvar _c;\n$RefreshReg$(_c, \"PublicMapView\");","map":{"version":3,"names":["React","useEffect","useState","GoogleMap","LoadScript","Marker","InfoWindow","axios","jsxDEV","_jsxDEV","containerStyle","width","height","center","lat","lng","PublicMapView","_s","offices","setOffices","selectedOffice","setSelectedOffice","fetchActiveOffices","interval","setInterval","clearInterval","handleAvailabilityUpdate","window","addEventListener","removeEventListener","response","get","data","error","console","handleMarkerClick","office","className","style","textAlign","padding","children","color","fileName","_jsxFileName","lineNumber","columnNumber","googleMapsApiKey","process","env","REACT_APP_GOOGLE_MAPS_API_KEY","mapContainerStyle","zoom","map","location","position","onClick","id","onCloseClick","name","city","state","zipCode","availableSlots","slot","index","_c","$RefreshReg$"],"sources":["/Users/tmoney/Desktop/mvp2/frontend/src/PublicMapView.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { GoogleMap, LoadScript, Marker, InfoWindow } from \"@react-google-maps/api\";\nimport axios from \"axios\";\n\nconst containerStyle = {\n  width: \"100%\",\n  height: \"500px\",\n};\n\nconst center = {\n  lat: 40.7128,\n  lng: -74.0060,\n};\n\nconst PublicMapView = () => {\n  const [offices, setOffices] = useState([]);\n  const [selectedOffice, setSelectedOffice] = useState(null);\n\n  useEffect(() => {\n    fetchActiveOffices();\n    const interval = setInterval(fetchActiveOffices, 10000); // Auto-refresh every 10 sec\n    return () => clearInterval(interval);\n  }, []);\n\n  useEffect(() => {\n    const handleAvailabilityUpdate = () => {\n      fetchActiveOffices();\n    };\n\n    window.addEventListener(\"availabilityUpdated\", handleAvailabilityUpdate);\n    return () => {\n      window.removeEventListener(\"availabilityUpdated\", handleAvailabilityUpdate);\n    };\n  }, []);\n\n  const fetchActiveOffices = async () => {\n    try {\n      const response = await axios.get(\"http://localhost:5000/active-offices\");\n      setOffices(response.data);\n    } catch (error) {\n      console.error(\"Error fetching active offices:\", error);\n    }\n  };\n\n  const handleMarkerClick = (office) => {\n    setSelectedOffice(office);\n  };\n\n  return (\n    <div className=\"App\" style={{ textAlign: \"center\", padding: \"20px\" }}>\n      <h1 style={{ color: \"#007bff\" }}>Live Dental Office Availability</h1>\n      <LoadScript googleMapsApiKey={process.env.REACT_APP_GOOGLE_MAPS_API_KEY}>\n        <GoogleMap mapContainerStyle={containerStyle} center={center} zoom={12}>\n          {offices.map((office) => (\n            office.location && (\n              <Marker\n                key={office.id}\n                position={office.location}\n                onClick={() => handleMarkerClick(office)}\n              />\n            )\n          ))}\n          {selectedOffice && (\n            <InfoWindow position={selectedOffice.location} onCloseClick={() => setSelectedOffice(null)}>\n              <div>\n                <h2>{selectedOffice.name}</h2>\n                <p>{selectedOffice.city}, {selectedOffice.state}, {selectedOffice.zipCode}</p>\n                <h4>Available Time Slots:</h4>\n                <ul>\n                  {selectedOffice.availableSlots.map((slot, index) => (\n                    <li key={index}>{slot}</li>\n                  ))}\n                </ul>\n              </div>\n            </InfoWindow>\n          )}\n        </GoogleMap>\n      </LoadScript>\n    </div>\n  );\n};\n\nexport default PublicMapView;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}