{"ast":null,"code":"var _jsxFileName = \"/Users/tmoney/Desktop/mvp2/frontend/src/PublicMapView.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { GoogleMap, Marker, InfoWindow } from '@react-google-maps/api';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst containerStyle = {\n  width: '100%',\n  height: '500px'\n};\nconst center = {\n  lat: 40.7128,\n  lng: -74.0060\n};\nconst PublicMapView = () => {\n  _s();\n  var _selectedOffice$avail;\n  const [offices, setOffices] = useState([]);\n  const [selectedOffice, setSelectedOffice] = useState(null);\n  useEffect(() => {\n    fetchActiveOffices();\n    const interval = setInterval(fetchActiveOffices, 1000); // ðŸ”„ Refresh every second\n    return () => clearInterval(interval);\n  }, []);\n  const fetchActiveOffices = async () => {\n    try {\n      console.log(\"Fetching active offices...\");\n      const response = await axios.get('http://localhost:5000/active-offices');\n      console.log(\"Active offices fetched:\", response.data);\n      response.data.forEach(office => {\n        console.log(`Office: ${office.name}, Available Slots:`, office.availableSlots);\n      });\n      setOffices(response.data);\n    } catch (error) {\n      console.error('Error fetching active offices:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Live Dental Office Availability\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(GoogleMap, {\n      mapContainerStyle: containerStyle,\n      center: center,\n      zoom: 12,\n      children: [offices.map(office => {\n        if (!office.location || !office.location.lat || !office.location.lng) {\n          console.warn(\"Skipping office with missing location:\", office);\n          return null;\n        }\n        console.log(\"Rendering marker for:\", office.name, \"at\", office.location);\n        return /*#__PURE__*/_jsxDEV(Marker, {\n          position: {\n            lat: office.location.lat,\n            lng: office.location.lng\n          },\n          onClick: () => setSelectedOffice(office)\n        }, office.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 13\n        }, this);\n      }), selectedOffice && /*#__PURE__*/_jsxDEV(InfoWindow, {\n        position: selectedOffice.location,\n        onCloseClick: () => setSelectedOffice(null),\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: selectedOffice.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 67,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Location: \", selectedOffice.city, \", \", selectedOffice.state, \", \", selectedOffice.zipCode]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 68,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"Available Time Slots:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 69,\n            columnNumber: 15\n          }, this), ((_selectedOffice$avail = selectedOffice.availableSlots) === null || _selectedOffice$avail === void 0 ? void 0 : _selectedOffice$avail.length) > 0 ? /*#__PURE__*/_jsxDEV(\"ul\", {\n            children: selectedOffice.availableSlots.map((slot, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n              children: slot\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 73,\n              columnNumber: 21\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 17\n          }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"No available slots.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 77,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 5\n  }, this);\n};\n_s(PublicMapView, \"65A3b2+X2KaquF3wFDr6JCHAi/Y=\");\n_c = PublicMapView;\nexport default PublicMapView;\nvar _c;\n$RefreshReg$(_c, \"PublicMapView\");","map":{"version":3,"names":["React","useEffect","useState","GoogleMap","Marker","InfoWindow","axios","jsxDEV","_jsxDEV","containerStyle","width","height","center","lat","lng","PublicMapView","_s","_selectedOffice$avail","offices","setOffices","selectedOffice","setSelectedOffice","fetchActiveOffices","interval","setInterval","clearInterval","console","log","response","get","data","forEach","office","name","availableSlots","error","children","fileName","_jsxFileName","lineNumber","columnNumber","mapContainerStyle","zoom","map","location","warn","position","onClick","id","onCloseClick","city","state","zipCode","length","slot","index","_c","$RefreshReg$"],"sources":["/Users/tmoney/Desktop/mvp2/frontend/src/PublicMapView.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { GoogleMap, Marker, InfoWindow } from '@react-google-maps/api';\nimport axios from 'axios';\n\nconst containerStyle = {\n  width: '100%',\n  height: '500px',\n};\n\nconst center = {\n  lat: 40.7128,\n  lng: -74.0060,\n};\n\nconst PublicMapView = () => {\n  const [offices, setOffices] = useState([]);\n  const [selectedOffice, setSelectedOffice] = useState(null);\n\n  useEffect(() => {\n    fetchActiveOffices();\n    const interval = setInterval(fetchActiveOffices, 1000); // ðŸ”„ Refresh every second\n    return () => clearInterval(interval);\n  }, []);\n\n  const fetchActiveOffices = async () => {\n    try {\n      console.log(\"Fetching active offices...\");\n      const response = await axios.get('http://localhost:5000/active-offices');\n      console.log(\"Active offices fetched:\", response.data);\n\n      response.data.forEach((office) => {\n        console.log(`Office: ${office.name}, Available Slots:`, office.availableSlots);\n      });\n\n      setOffices(response.data);\n    } catch (error) {\n      console.error('Error fetching active offices:', error);\n    }\n  };\n\n  return (\n    <div>\n      <h1>Live Dental Office Availability</h1>\n      <GoogleMap mapContainerStyle={containerStyle} center={center} zoom={12}>\n        {offices.map((office) => {\n          if (!office.location || !office.location.lat || !office.location.lng) {\n            console.warn(\"Skipping office with missing location:\", office);\n            return null;\n          }\n          console.log(\"Rendering marker for:\", office.name, \"at\", office.location);\n\n          return (\n            <Marker\n              key={office.id}\n              position={{ lat: office.location.lat, lng: office.location.lng }}\n              onClick={() => setSelectedOffice(office)}\n            />\n          );\n        })}\n\n        {selectedOffice && (\n          <InfoWindow\n            position={selectedOffice.location}\n            onCloseClick={() => setSelectedOffice(null)}\n          >\n            <div>\n              <h2>{selectedOffice.name}</h2>\n              <p>Location: {selectedOffice.city}, {selectedOffice.state}, {selectedOffice.zipCode}</p>\n              <h3>Available Time Slots:</h3>\n              {selectedOffice.availableSlots?.length > 0 ? (\n                <ul>\n                  {selectedOffice.availableSlots.map((slot, index) => (\n                    <li key={index}>{slot}</li>\n                  ))}\n                </ul>\n              ) : (\n                <p>No available slots.</p>\n              )}\n            </div>\n          </InfoWindow>\n        )}\n      </GoogleMap>\n    </div>\n  );\n};\n\nexport default PublicMapView;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}