{"ast":null,"code":"var _jsxFileName = \"/Users/tmoney/Desktop/mvp2/frontend/src/OfficeDashboard.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst availableHours = [\"6:00 AM\", \"7:00 AM\", \"8:00 AM\", \"9:00 AM\", \"10:00 AM\", \"11:00 AM\", \"12:00 PM\", \"1:00 PM\", \"2:00 PM\", \"3:00 PM\", \"4:00 PM\", \"5:00 PM\", \"6:00 PM\"];\nconst OfficeDashboard = ({\n  loggedInOffice,\n  setLoggedInOffice\n}) => {\n  _s();\n  const [selectedSlots, setSelectedSlots] = useState(loggedInOffice.availableSlots || []);\n  const [message, setMessage] = useState(\"\");\n  const toggleSlot = slot => {\n    setSelectedSlots(prev => prev.includes(slot) ? prev.filter(s => s !== slot) : [...prev, slot]);\n  };\n  const updateAvailability = async () => {\n    try {\n      await axios.post(\"http://localhost:5000/update-availability\", {\n        email: loggedInOffice.email,\n        availableSlots: selectedSlots\n      });\n      setMessage(\"Availability updated successfully!\");\n    } catch (error) {\n      console.error(\"Error updating availability:\", error);\n      setMessage(\"Failed to update availability.\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Dental Office Dashboard\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: [\"Welcome, \", loggedInOffice.name]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Location: \", loggedInOffice.city, \", \", loggedInOffice.state, \", \", loggedInOffice.zipCode]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Select Available Hours\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: availableHours.map(hour => /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => toggleSlot(hour),\n        style: {\n          margin: \"5px\",\n          backgroundColor: selectedSlots.includes(hour) ? \"green\" : \"gray\",\n          color: \"white\",\n          padding: \"10px\",\n          border: \"none\",\n          cursor: \"pointer\"\n        },\n        children: hour\n      }, hour, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: updateAvailability,\n      style: {\n        marginTop: \"10px\",\n        padding: \"10px\",\n        backgroundColor: \"#007bff\",\n        color: \"white\",\n        border: \"none\",\n        cursor: \"pointer\"\n      },\n      children: \"Update Availability\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => setLoggedInOffice(null),\n      style: {\n        marginLeft: \"10px\",\n        padding: \"10px\",\n        backgroundColor: \"red\",\n        color: \"white\",\n        border: \"none\",\n        cursor: \"pointer\"\n      },\n      children: \"Logout\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this), message && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 19\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 5\n  }, this);\n};\n_s(OfficeDashboard, \"ttDWcZRMLX/b62uY03p6pKsf6Us=\");\n_c = OfficeDashboard;\nexport default OfficeDashboard;\nvar _c;\n$RefreshReg$(_c, \"OfficeDashboard\");","map":{"version":3,"names":["React","useState","useEffect","axios","jsxDEV","_jsxDEV","availableHours","OfficeDashboard","loggedInOffice","setLoggedInOffice","_s","selectedSlots","setSelectedSlots","availableSlots","message","setMessage","toggleSlot","slot","prev","includes","filter","s","updateAvailability","post","email","error","console","children","fileName","_jsxFileName","lineNumber","columnNumber","name","city","state","zipCode","map","hour","onClick","style","margin","backgroundColor","color","padding","border","cursor","marginTop","marginLeft","_c","$RefreshReg$"],"sources":["/Users/tmoney/Desktop/mvp2/frontend/src/OfficeDashboard.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\n\nconst availableHours = [\n  \"6:00 AM\", \"7:00 AM\", \"8:00 AM\", \"9:00 AM\", \"10:00 AM\", \"11:00 AM\",\n  \"12:00 PM\", \"1:00 PM\", \"2:00 PM\", \"3:00 PM\", \"4:00 PM\", \"5:00 PM\", \"6:00 PM\"\n];\n\nconst OfficeDashboard = ({ loggedInOffice, setLoggedInOffice }) => {\n  const [selectedSlots, setSelectedSlots] = useState(loggedInOffice.availableSlots || []);\n  const [message, setMessage] = useState(\"\");\n\n  const toggleSlot = (slot) => {\n    setSelectedSlots((prev) =>\n      prev.includes(slot) ? prev.filter((s) => s !== slot) : [...prev, slot]\n    );\n  };\n\n  const updateAvailability = async () => {\n    try {\n      await axios.post(\"http://localhost:5000/update-availability\", {\n        email: loggedInOffice.email,\n        availableSlots: selectedSlots,\n      });\n      setMessage(\"Availability updated successfully!\");\n    } catch (error) {\n      console.error(\"Error updating availability:\", error);\n      setMessage(\"Failed to update availability.\");\n    }\n  };\n\n  return (\n    <div>\n      <h2>Dental Office Dashboard</h2>\n      <h3>Welcome, {loggedInOffice.name}</h3>\n      <p>Location: {loggedInOffice.city}, {loggedInOffice.state}, {loggedInOffice.zipCode}</p>\n\n      <h3>Select Available Hours</h3>\n      <div>\n        {availableHours.map((hour) => (\n          <button\n            key={hour}\n            onClick={() => toggleSlot(hour)}\n            style={{\n              margin: \"5px\",\n              backgroundColor: selectedSlots.includes(hour) ? \"green\" : \"gray\",\n              color: \"white\",\n              padding: \"10px\",\n              border: \"none\",\n              cursor: \"pointer\",\n            }}\n          >\n            {hour}\n          </button>\n        ))}\n      </div>\n      <button onClick={updateAvailability} style={{ marginTop: \"10px\", padding: \"10px\", backgroundColor: \"#007bff\", color: \"white\", border: \"none\", cursor: \"pointer\" }}>\n        Update Availability\n      </button>\n      <button onClick={() => setLoggedInOffice(null)} style={{ marginLeft: \"10px\", padding: \"10px\", backgroundColor: \"red\", color: \"white\", border: \"none\", cursor: \"pointer\" }}>\n        Logout\n      </button>\n      {message && <p>{message}</p>}\n    </div>\n  );\n};\n\nexport default OfficeDashboard;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}