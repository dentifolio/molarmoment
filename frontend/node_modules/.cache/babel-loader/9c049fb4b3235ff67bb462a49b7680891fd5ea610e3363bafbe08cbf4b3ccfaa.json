{"ast":null,"code":"var _jsxFileName = \"/Users/tmoney/Desktop/mvp2/frontend/src/PublicMapView.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { GoogleMap, Marker, InfoWindow } from '@react-google-maps/api';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst containerStyle = {\n  width: '100%',\n  height: '500px'\n};\nconst center = {\n  lat: 40.7128,\n  lng: -74.0060\n};\nconst GOOGLE_MAPS_API_KEY = \"YOUR_GOOGLE_MAPS_API_KEY\"; // Replace with your actual API key\n\nconst PublicMapView = () => {\n  _s();\n  var _selectedOffice$avail;\n  const [offices, setOffices] = useState([]);\n  const [selectedOffice, setSelectedOffice] = useState(null);\n  useEffect(() => {\n    fetchActiveOffices();\n    const interval = setInterval(fetchActiveOffices, 1000); // Refresh every second\n    return () => clearInterval(interval);\n  }, []);\n  const fetchActiveOffices = async () => {\n    try {\n      console.log(\"üîÑ Fetching updated active offices...\");\n      const response = await axios.get('http://localhost:5000/active-offices');\n      let updatedOffices = [];\n      for (let office of response.data) {\n        if (!office.location || !office.location.lat || !office.location.lng) {\n          console.warn(\"‚ö†Ô∏è Skipping office with missing location:\", office);\n          if (office.zipCode) {\n            console.log(\"üìç Attempting to fetch location for ZIP code:\", office.zipCode);\n            try {\n              const geoResponse = await axios.get(`https://maps.googleapis.com/maps/api/geocode/json?address=${office.zipCode},${office.city},${office.state}&key=${GOOGLE_MAPS_API_KEY}`);\n              if (geoResponse.data.status === \"OK\") {\n                const geoLocation = geoResponse.data.results[0].geometry.location;\n                office.location = {\n                  lat: geoLocation.lat,\n                  lng: geoLocation.lng\n                };\n                console.log(`‚úÖ Geolocation found for ${office.zipCode}:`, geoLocation);\n              } else {\n                console.error(\"‚ùå Failed to get location for ZIP:\", office.zipCode);\n              }\n            } catch (geoError) {\n              console.error(\"‚ùå Geolocation API error:\", geoError);\n            }\n          }\n        }\n        updatedOffices.push(office);\n      }\n      setOffices(updatedOffices);\n    } catch (error) {\n      console.error('‚ùå Error fetching active offices:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Live Dental Office Availability\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(GoogleMap, {\n      mapContainerStyle: containerStyle,\n      center: center,\n      zoom: 12,\n      children: [offices.map(office => {\n        if (!office.location || !office.location.lat || !office.location.lng) {\n          console.warn(\"‚ö†Ô∏è Skipping office with missing location:\", office);\n          return null;\n        }\n        console.log(\"üìç Rendering marker for:\", office.name, \"at\", office.location);\n        return /*#__PURE__*/_jsxDEV(Marker, {\n          position: {\n            lat: office.location.lat,\n            lng: office.location.lng\n          },\n          onClick: () => setSelectedOffice(office)\n        }, office.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 13\n        }, this);\n      }), selectedOffice && /*#__PURE__*/_jsxDEV(InfoWindow, {\n        position: selectedOffice.location,\n        onCloseClick: () => setSelectedOffice(null),\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: selectedOffice.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 91,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Location: \", selectedOffice.city, \", \", selectedOffice.state, \", \", selectedOffice.zipCode]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 92,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"Available Time Slots:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 93,\n            columnNumber: 15\n          }, this), ((_selectedOffice$avail = selectedOffice.availableSlots) === null || _selectedOffice$avail === void 0 ? void 0 : _selectedOffice$avail.length) > 0 ? /*#__PURE__*/_jsxDEV(\"ul\", {\n            children: selectedOffice.availableSlots.map((slot, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n              children: slot\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 97,\n              columnNumber: 21\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 95,\n            columnNumber: 17\n          }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"No available slots.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 101,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 5\n  }, this);\n};\n_s(PublicMapView, \"65A3b2+X2KaquF3wFDr6JCHAi/Y=\");\n_c = PublicMapView;\nexport default PublicMapView;\nvar _c;\n$RefreshReg$(_c, \"PublicMapView\");","map":{"version":3,"names":["React","useEffect","useState","GoogleMap","Marker","InfoWindow","axios","jsxDEV","_jsxDEV","containerStyle","width","height","center","lat","lng","GOOGLE_MAPS_API_KEY","PublicMapView","_s","_selectedOffice$avail","offices","setOffices","selectedOffice","setSelectedOffice","fetchActiveOffices","interval","setInterval","clearInterval","console","log","response","get","updatedOffices","office","data","location","warn","zipCode","geoResponse","city","state","status","geoLocation","results","geometry","error","geoError","push","children","fileName","_jsxFileName","lineNumber","columnNumber","mapContainerStyle","zoom","map","name","position","onClick","id","onCloseClick","availableSlots","length","slot","index","_c","$RefreshReg$"],"sources":["/Users/tmoney/Desktop/mvp2/frontend/src/PublicMapView.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { GoogleMap, Marker, InfoWindow } from '@react-google-maps/api';\nimport axios from 'axios';\n\nconst containerStyle = {\n  width: '100%',\n  height: '500px',\n};\n\nconst center = {\n  lat: 40.7128,\n  lng: -74.0060,\n};\n\nconst GOOGLE_MAPS_API_KEY = \"YOUR_GOOGLE_MAPS_API_KEY\"; // Replace with your actual API key\n\nconst PublicMapView = () => {\n  const [offices, setOffices] = useState([]);\n  const [selectedOffice, setSelectedOffice] = useState(null);\n\n  useEffect(() => {\n    fetchActiveOffices();\n    const interval = setInterval(fetchActiveOffices, 1000); // Refresh every second\n    return () => clearInterval(interval);\n  }, []);\n\n  const fetchActiveOffices = async () => {\n    try {\n      console.log(\"üîÑ Fetching updated active offices...\");\n      const response = await axios.get('http://localhost:5000/active-offices');\n      let updatedOffices = [];\n\n      for (let office of response.data) {\n        if (!office.location || !office.location.lat || !office.location.lng) {\n          console.warn(\"‚ö†Ô∏è Skipping office with missing location:\", office);\n\n          if (office.zipCode) {\n            console.log(\"üìç Attempting to fetch location for ZIP code:\", office.zipCode);\n            try {\n              const geoResponse = await axios.get(\n                `https://maps.googleapis.com/maps/api/geocode/json?address=${office.zipCode},${office.city},${office.state}&key=${GOOGLE_MAPS_API_KEY}`\n              );\n\n              if (geoResponse.data.status === \"OK\") {\n                const geoLocation = geoResponse.data.results[0].geometry.location;\n                office.location = { lat: geoLocation.lat, lng: geoLocation.lng };\n                console.log(`‚úÖ Geolocation found for ${office.zipCode}:`, geoLocation);\n              } else {\n                console.error(\"‚ùå Failed to get location for ZIP:\", office.zipCode);\n              }\n            } catch (geoError) {\n              console.error(\"‚ùå Geolocation API error:\", geoError);\n            }\n          }\n        }\n        updatedOffices.push(office);\n      }\n\n      setOffices(updatedOffices);\n    } catch (error) {\n      console.error('‚ùå Error fetching active offices:', error);\n    }\n  };\n\n  return (\n    <div>\n      <h1>Live Dental Office Availability</h1>\n      <GoogleMap mapContainerStyle={containerStyle} center={center} zoom={12}>\n        {offices.map((office) => {\n          if (!office.location || !office.location.lat || !office.location.lng) {\n            console.warn(\"‚ö†Ô∏è Skipping office with missing location:\", office);\n            return null;\n          }\n          console.log(\"üìç Rendering marker for:\", office.name, \"at\", office.location);\n\n          return (\n            <Marker\n              key={office.id}\n              position={{ lat: office.location.lat, lng: office.location.lng }}\n              onClick={() => setSelectedOffice(office)}\n            />\n          );\n        })}\n\n        {selectedOffice && (\n          <InfoWindow\n            position={selectedOffice.location}\n            onCloseClick={() => setSelectedOffice(null)}\n          >\n            <div>\n              <h2>{selectedOffice.name}</h2>\n              <p>Location: {selectedOffice.city}, {selectedOffice.state}, {selectedOffice.zipCode}</p>\n              <h3>Available Time Slots:</h3>\n              {selectedOffice.availableSlots?.length > 0 ? (\n                <ul>\n                  {selectedOffice.availableSlots.map((slot, index) => (\n                    <li key={index}>{slot}</li>\n                  ))}\n                </ul>\n              ) : (\n                <p>No available slots.</p>\n              )}\n            </div>\n          </InfoWindow>\n        )}\n      </GoogleMap>\n    </div>\n  );\n};\n\nexport default PublicMapView;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}