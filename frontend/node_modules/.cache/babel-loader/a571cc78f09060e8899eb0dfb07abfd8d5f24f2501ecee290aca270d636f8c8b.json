{"ast":null,"code":"var _jsxFileName = \"/Users/tmoney/Desktop/mvp2/frontend/src/PublicMapView.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { GoogleMap, LoadScript, Marker, InfoWindow } from \"@react-google-maps/api\";\nimport axios from \"axios\";\nimport OfficeDashboard from \"./OfficeDashboard\"; // Import Office Dashboard\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst containerStyle = {\n  width: \"100%\",\n  height: \"500px\"\n};\nconst defaultCenter = {\n  lat: 40.7128,\n  lng: -74.006\n}; // Default: New York\n\nconst PublicMapView = ({\n  loggedInOffice\n}) => {\n  _s();\n  const [offices, setOffices] = useState([]);\n  const [selectedOffice, setSelectedOffice] = useState(null);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    fetchActiveOffices();\n    const interval = setInterval(fetchActiveOffices, 1000); // Refresh every second\n    return () => clearInterval(interval);\n  }, []);\n  const fetchActiveOffices = async () => {\n    try {\n      console.log(\"üì° Fetching updated active offices...\");\n      const response = await axios.get(\"http://localhost:5000/active-offices\");\n      setOffices(response.data);\n      setLoading(false);\n    } catch (error) {\n      console.error(\"‚ùå Error fetching offices:\", error);\n      setLoading(false);\n    }\n  };\n  const handleMarkerClick = office => {\n    setSelectedOffice(office);\n  };\n  const handleCloseInfoWindow = () => {\n    setSelectedOffice(null);\n  };\n\n  // **üü¢ Toggle View: Show Dashboard if Office is Logged In**\n  if (loggedInOffice) {\n    return /*#__PURE__*/_jsxDEV(OfficeDashboard, {\n      loggedInOffice: loggedInOffice\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"map-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      style: {\n        textAlign: \"center\",\n        color: \"#007bff\"\n      },\n      children: \"Live Dental Office Availability\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this), loading ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 18\n    }, this) : null, /*#__PURE__*/_jsxDEV(LoadScript, {\n      googleMapsApiKey: \"YAIzaSyDGBHVURcrUdjYNhCDNjFBWawsv612pQU0\",\n      children: /*#__PURE__*/_jsxDEV(GoogleMap, {\n        mapContainerStyle: containerStyle,\n        center: defaultCenter,\n        zoom: 12,\n        children: [offices.map(office => office.location ? /*#__PURE__*/_jsxDEV(Marker, {\n          position: office.location,\n          onClick: () => handleMarkerClick(office)\n        }, office.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 15\n        }, this) : console.warn(`‚ö†Ô∏è Skipping office with missing location:`, office)), selectedOffice && /*#__PURE__*/_jsxDEV(InfoWindow, {\n          position: selectedOffice.location,\n          onCloseClick: handleCloseInfoWindow,\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n              children: selectedOffice.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 71,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"Location: \", selectedOffice.city, \", \", selectedOffice.state, \", \", selectedOffice.zipCode]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 72,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n              children: \"Available Time Slots:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 75,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n              children: selectedOffice.availableSlots.length > 0 ? selectedOffice.availableSlots.map((slot, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n                children: slot\n              }, index, false, {\n                fileName: _jsxFileName,\n                lineNumber: 78,\n                columnNumber: 72\n              }, this)) : /*#__PURE__*/_jsxDEV(\"li\", {\n                children: \"No available slots\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 80,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 76,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 70,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 5\n  }, this);\n};\n_s(PublicMapView, \"Ptx5ki78iIFjsAyHxXayxi4AAAA=\");\n_c = PublicMapView;\nexport default PublicMapView;\nvar _c;\n$RefreshReg$(_c, \"PublicMapView\");","map":{"version":3,"names":["React","useEffect","useState","GoogleMap","LoadScript","Marker","InfoWindow","axios","OfficeDashboard","jsxDEV","_jsxDEV","containerStyle","width","height","defaultCenter","lat","lng","PublicMapView","loggedInOffice","_s","offices","setOffices","selectedOffice","setSelectedOffice","loading","setLoading","fetchActiveOffices","interval","setInterval","clearInterval","console","log","response","get","data","error","handleMarkerClick","office","handleCloseInfoWindow","fileName","_jsxFileName","lineNumber","columnNumber","className","children","style","textAlign","color","googleMapsApiKey","mapContainerStyle","center","zoom","map","location","position","onClick","id","warn","onCloseClick","name","city","state","zipCode","availableSlots","length","slot","index","_c","$RefreshReg$"],"sources":["/Users/tmoney/Desktop/mvp2/frontend/src/PublicMapView.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { GoogleMap, LoadScript, Marker, InfoWindow } from \"@react-google-maps/api\";\nimport axios from \"axios\";\nimport OfficeDashboard from \"./OfficeDashboard\"; // Import Office Dashboard\n\nconst containerStyle = {\n  width: \"100%\",\n  height: \"500px\",\n};\n\nconst defaultCenter = { lat: 40.7128, lng: -74.006 }; // Default: New York\n\nconst PublicMapView = ({ loggedInOffice }) => {\n  const [offices, setOffices] = useState([]);\n  const [selectedOffice, setSelectedOffice] = useState(null);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    fetchActiveOffices();\n    const interval = setInterval(fetchActiveOffices, 1000); // Refresh every second\n    return () => clearInterval(interval);\n  }, []);\n\n  const fetchActiveOffices = async () => {\n    try {\n      console.log(\"üì° Fetching updated active offices...\");\n      const response = await axios.get(\"http://localhost:5000/active-offices\");\n      setOffices(response.data);\n      setLoading(false);\n    } catch (error) {\n      console.error(\"‚ùå Error fetching offices:\", error);\n      setLoading(false);\n    }\n  };\n\n  const handleMarkerClick = (office) => {\n    setSelectedOffice(office);\n  };\n\n  const handleCloseInfoWindow = () => {\n    setSelectedOffice(null);\n  };\n\n  // **üü¢ Toggle View: Show Dashboard if Office is Logged In**\n  if (loggedInOffice) {\n    return <OfficeDashboard loggedInOffice={loggedInOffice} />;\n  }\n\n  return (\n    <div className=\"map-container\">\n      <h1 style={{ textAlign: \"center\", color: \"#007bff\" }}>Live Dental Office Availability</h1>\n      {loading ? <p>Loading...</p> : null}\n\n      <LoadScript googleMapsApiKey=\"YAIzaSyDGBHVURcrUdjYNhCDNjFBWawsv612pQU0\">\n        <GoogleMap mapContainerStyle={containerStyle} center={defaultCenter} zoom={12}>\n          {offices.map((office) =>\n            office.location ? (\n              <Marker\n                key={office.id}\n                position={office.location}\n                onClick={() => handleMarkerClick(office)}\n              />\n            ) : (\n              console.warn(`‚ö†Ô∏è Skipping office with missing location:`, office)\n            )\n          )}\n\n          {selectedOffice && (\n            <InfoWindow position={selectedOffice.location} onCloseClick={handleCloseInfoWindow}>\n              <div>\n                <h2>{selectedOffice.name}</h2>\n                <p>\n                  Location: {selectedOffice.city}, {selectedOffice.state}, {selectedOffice.zipCode}\n                </p>\n                <h3>Available Time Slots:</h3>\n                <ul>\n                  {selectedOffice.availableSlots.length > 0 ? (\n                    selectedOffice.availableSlots.map((slot, index) => <li key={index}>{slot}</li>)\n                  ) : (\n                    <li>No available slots</li>\n                  )}\n                </ul>\n              </div>\n            </InfoWindow>\n          )}\n        </GoogleMap>\n      </LoadScript>\n    </div>\n  );\n};\n\nexport default PublicMapView;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,SAAS,EAAEC,UAAU,EAAEC,MAAM,EAAEC,UAAU,QAAQ,wBAAwB;AAClF,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAOC,eAAe,MAAM,mBAAmB,CAAC,CAAC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEjD,MAAMC,cAAc,GAAG;EACrBC,KAAK,EAAE,MAAM;EACbC,MAAM,EAAE;AACV,CAAC;AAED,MAAMC,aAAa,GAAG;EAAEC,GAAG,EAAE,OAAO;EAAEC,GAAG,EAAE,CAAC;AAAO,CAAC,CAAC,CAAC;;AAEtD,MAAMC,aAAa,GAAGA,CAAC;EAAEC;AAAe,CAAC,KAAK;EAAAC,EAAA;EAC5C,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGnB,QAAQ,CAAC,EAAE,CAAC;EAC1C,MAAM,CAACoB,cAAc,EAAEC,iBAAiB,CAAC,GAAGrB,QAAQ,CAAC,IAAI,CAAC;EAC1D,MAAM,CAACsB,OAAO,EAAEC,UAAU,CAAC,GAAGvB,QAAQ,CAAC,IAAI,CAAC;EAE5CD,SAAS,CAAC,MAAM;IACdyB,kBAAkB,CAAC,CAAC;IACpB,MAAMC,QAAQ,GAAGC,WAAW,CAACF,kBAAkB,EAAE,IAAI,CAAC,CAAC,CAAC;IACxD,OAAO,MAAMG,aAAa,CAACF,QAAQ,CAAC;EACtC,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMD,kBAAkB,GAAG,MAAAA,CAAA,KAAY;IACrC,IAAI;MACFI,OAAO,CAACC,GAAG,CAAC,uCAAuC,CAAC;MACpD,MAAMC,QAAQ,GAAG,MAAMzB,KAAK,CAAC0B,GAAG,CAAC,sCAAsC,CAAC;MACxEZ,UAAU,CAACW,QAAQ,CAACE,IAAI,CAAC;MACzBT,UAAU,CAAC,KAAK,CAAC;IACnB,CAAC,CAAC,OAAOU,KAAK,EAAE;MACdL,OAAO,CAACK,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;MACjDV,UAAU,CAAC,KAAK,CAAC;IACnB;EACF,CAAC;EAED,MAAMW,iBAAiB,GAAIC,MAAM,IAAK;IACpCd,iBAAiB,CAACc,MAAM,CAAC;EAC3B,CAAC;EAED,MAAMC,qBAAqB,GAAGA,CAAA,KAAM;IAClCf,iBAAiB,CAAC,IAAI,CAAC;EACzB,CAAC;;EAED;EACA,IAAIL,cAAc,EAAE;IAClB,oBAAOR,OAAA,CAACF,eAAe;MAACU,cAAc,EAAEA;IAAe;MAAAqB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAC5D;EAEA,oBACEhC,OAAA;IAAKiC,SAAS,EAAC,eAAe;IAAAC,QAAA,gBAC5BlC,OAAA;MAAImC,KAAK,EAAE;QAAEC,SAAS,EAAE,QAAQ;QAAEC,KAAK,EAAE;MAAU,CAAE;MAAAH,QAAA,EAAC;IAA+B;MAAAL,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,EACzFlB,OAAO,gBAAGd,OAAA;MAAAkC,QAAA,EAAG;IAAU;MAAAL,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC,GAAG,IAAI,eAEnChC,OAAA,CAACN,UAAU;MAAC4C,gBAAgB,EAAC,0CAA0C;MAAAJ,QAAA,eACrElC,OAAA,CAACP,SAAS;QAAC8C,iBAAiB,EAAEtC,cAAe;QAACuC,MAAM,EAAEpC,aAAc;QAACqC,IAAI,EAAE,EAAG;QAAAP,QAAA,GAC3ExB,OAAO,CAACgC,GAAG,CAAEf,MAAM,IAClBA,MAAM,CAACgB,QAAQ,gBACb3C,OAAA,CAACL,MAAM;UAELiD,QAAQ,EAAEjB,MAAM,CAACgB,QAAS;UAC1BE,OAAO,EAAEA,CAAA,KAAMnB,iBAAiB,CAACC,MAAM;QAAE,GAFpCA,MAAM,CAACmB,EAAE;UAAAjB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAGf,CAAC,GAEFZ,OAAO,CAAC2B,IAAI,CAAC,2CAA2C,EAAEpB,MAAM,CAEpE,CAAC,EAEAf,cAAc,iBACbZ,OAAA,CAACJ,UAAU;UAACgD,QAAQ,EAAEhC,cAAc,CAAC+B,QAAS;UAACK,YAAY,EAAEpB,qBAAsB;UAAAM,QAAA,eACjFlC,OAAA;YAAAkC,QAAA,gBACElC,OAAA;cAAAkC,QAAA,EAAKtB,cAAc,CAACqC;YAAI;cAAApB,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAK,CAAC,eAC9BhC,OAAA;cAAAkC,QAAA,GAAG,YACS,EAACtB,cAAc,CAACsC,IAAI,EAAC,IAAE,EAACtC,cAAc,CAACuC,KAAK,EAAC,IAAE,EAACvC,cAAc,CAACwC,OAAO;YAAA;cAAAvB,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAC/E,CAAC,eACJhC,OAAA;cAAAkC,QAAA,EAAI;YAAqB;cAAAL,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAI,CAAC,eAC9BhC,OAAA;cAAAkC,QAAA,EACGtB,cAAc,CAACyC,cAAc,CAACC,MAAM,GAAG,CAAC,GACvC1C,cAAc,CAACyC,cAAc,CAACX,GAAG,CAAC,CAACa,IAAI,EAAEC,KAAK,kBAAKxD,OAAA;gBAAAkC,QAAA,EAAiBqB;cAAI,GAAZC,KAAK;gBAAA3B,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAY,CAAC,CAAC,gBAE/EhC,OAAA;gBAAAkC,QAAA,EAAI;cAAkB;gBAAAL,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAI;YAC3B;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACC,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACF;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACI,CACb;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACQ;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACF,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACV,CAAC;AAEV,CAAC;AAACvB,EAAA,CA7EIF,aAAa;AAAAkD,EAAA,GAAblD,aAAa;AA+EnB,eAAeA,aAAa;AAAC,IAAAkD,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}